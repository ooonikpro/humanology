{"version":3,"file":"static/js/9127.37baf84d.chunk.js","mappings":"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","sources":["webpack://humanology/./src/components/AuthorLine/AuthorLine.module.scss?8823","components/AuthorLine/AuthorLine.tsx","webpack://humanology/./src/components/TextInline/TextInline.module.scss?4061","components/TextInline/TextInline.tsx","webpack://humanology/./src/components/TitleInfo/TitleInfo.module.scss?5416","components/TitleInfo/TitleInfo.tsx","webpack://humanology/./src/components/WhiteCard/WhiteCard.module.scss?f517","components/WhiteCard/WhiteCard.tsx","containers/Quadras/Quadras.module.scss","webpack://humanology/./src/components/QuadraCard/QuadraCard.module.scss?5362","components/QuadraCard/QuadraCard.tsx","containers/Quadras/Quadras.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AuthorLine_root__KscPk\",\"pair\":\"AuthorLine_pair__+aqp4\"};","import React from 'react';\r\nimport styles from './AuthorLine.module.scss';\r\nimport { Icon } from '../Icon';\r\nimport { Text } from '../Text';\r\nimport * as Icons from '../Icon/icons';\r\n\r\ninterface Props {\r\n\ttext?: string;\r\n    iconName: keyof typeof Icons;\r\n\tchildren: React.ReactNode;\r\n}\r\n\r\nexport const AuthorLine : React.FC<Props> = ({ text, iconName, children }) => {\r\n    return (\r\n        <div className={styles.root}>\r\n            <span className={styles.pair}>\r\n                <Icon name={iconName} color=\"accent\" size={16}/>\r\n                <Text size=\"small\" color=\"accent\">\r\n                    {text}\r\n                </Text>\r\n            </span>\r\n            <span className={styles.pair}>\r\n                <Text size=\"small\" color=\"accent\">\r\n                    {children}\r\n                </Text>\r\n                <Icon name=\"UserCheck\" color=\"accent\" size={16}/>\r\n            </span>\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TextInline_root__RAkEm\",\"align-start\":\"TextInline_align-start__e4AtX\",\"align-stretch\":\"TextInline_align-stretch__0eCGa\",\"align-center\":\"TextInline_align-center__4iy8V\",\"justify-start\":\"TextInline_justify-start__sd6s5\",\"justify-between\":\"TextInline_justify-between__-CLpo\"};","import React from 'react';\r\nimport styles from './TextInline.module.scss';\r\n\r\nexport interface Props {\r\n    className?: string;\r\n    children: React.ReactNode[];\r\n    align?: 'center' | 'start' | 'stretch';\r\n    justify?: 'start' | 'between';\r\n}\r\n\r\nexport const TextInline: React.FC<Props> = ({ children, align = 'center', justify = 'start', className }) => {\r\n    return (\r\n        <div className={[\r\n            styles.root,\r\n            styles[`align-${align}`],\r\n            styles[`justify-${justify}`],\r\n            className\r\n        ].join(' ')}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"TitleInfo_icon__qdCFM\"};","import React from 'react';\r\nimport styles from './TitleInfo.module.scss';\r\n\r\nimport { Text, Props as TextProps } from '../Text';\r\nimport { Icon, Props as IconProps } from '../Icon';\r\nimport { TextInline, Props as TextInlineProps } from '../TextInline';\r\n\r\ninterface Props {\r\n    textColor?: TextProps<'strong'>['color'];\r\n    textSize?: TextProps<'strong'>['size'];\r\n    iconColor?: IconProps['color'];\r\n    iconSize?: IconProps['size'];\r\n    align?: TextInlineProps['align'],\r\n    children?: React.ReactNode | React.ReactNode[];\r\n    className?: string;\r\n    render?: () => Props['children'];\r\n}\r\n\r\nexport const TitleInfo: React.FC<Props> = ({\r\n    textColor = 'accent',\r\n    textSize = 'base',\r\n    iconColor = 'accent',\r\n    iconSize = 24,\r\n    align,\r\n    children,\r\n    className,\r\n    render,\r\n}) => {\r\n    return (\r\n        <TextInline align={align} className={className} justify=\"between\">\r\n            {\r\n                render ? render() :\r\n                    <Text tag=\"p\" color={textColor} size={textSize} className={styles.text}>\r\n                        {children}\r\n                    </Text>\r\n            }\r\n\r\n            <Icon\r\n                name=\"Help\"\r\n                color={iconColor}\r\n                size={iconSize}\r\n                className={styles.icon}\r\n            />\r\n        </TextInline>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WhiteCard_root__4CB-F\",\"white\":\"WhiteCard_white__CsytW\",\"beige\":\"WhiteCard_beige__rBOqm\",\"beige-title\":\"WhiteCard_beige-title__VaXNR\",\"small\":\"WhiteCard_small__cJWRQ\"};","import React from 'react';\r\nimport styles from './WhiteCard.module.scss';\r\n\r\ninterface Props {\r\n    small?: boolean;\r\n    children?: React.ReactNode | React.ReactNode[];\r\n    className?: string;\r\n    color?: 'white' | 'beige' | 'beige-title' | 'beige-title-big';\r\n    style?: React.CSSProperties;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport const WhiteCard = React.forwardRef<HTMLDivElement, Props>(\r\n    function WhiteCard({ small, color = 'white', children, className, style, onClick }, ref) {\r\n        const classes = [\r\n            styles.root,\r\n            styles[color],\r\n            small ? styles.small : '',\r\n            className,\r\n        ].join(' ');\r\n\r\n        return (\r\n            <div ref={ref} className={classes} style={style} onClick={onClick}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n);","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Quadras_root__FdnWt\",\"text-right\":\"Quadras_text-right__hKFWH\",\"title\":\"Quadras_title__bLFhv\",\"mb8\":\"Quadras_mb8__G4RFH\",\"grower\":\"Quadras_grower__bYLyN\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QuadraCard_root__qyPhH\",\"title\":\"QuadraCard_title__bpMpx\",\"wrap\":\"QuadraCard_wrap__Ys9se\",\"text\":\"QuadraCard_text__RbUpA\",\"icon\":\"QuadraCard_icon__XyKSA\"};","import React from 'react';\r\nimport styles from './QuadraCard.module.scss';\r\nimport { TextInline } from '../TextInline';\r\nimport { getIconName, Icon } from '../Icon';\r\nimport { TitleInfo } from '../TitleInfo';\r\nimport { Text } from '../Text';\r\nimport { WhiteCard } from '../WhiteCard';\r\nimport { useColorElement } from '../../hooks';\r\nimport { QUADRAS } from '../../constants/natureElements';\r\nimport { Socionics } from '../../types';\r\n\r\nexport interface Props {\r\n    element: Socionics.Quadras;\r\n    onClick: () => void;\r\n    status: string;\r\n    types: string[];\r\n    intro : string;\r\n    description: Array<{\r\n        title: string;\r\n        content: string;\r\n    }>\r\n}\r\n\r\nexport const QuadraCard: React.FC<Props> = ({\r\n    element,\r\n    onClick,\r\n    status,\r\n    types,\r\n    intro,\r\n    description\r\n}) => {\r\n    const { color: style } = useColorElement(element);\r\n    const title = QUADRAS[element];\r\n\r\n    return (\r\n        <WhiteCard\r\n            style={style}\r\n            className={styles.root}\r\n            onClick={onClick}\r\n        >\r\n            <TextInline align=\"start\" className={styles.text}>\r\n                <div className={styles.icon}>\r\n                    <Icon\r\n                        size={64}\r\n                        color=\"element\"\r\n                        name={getIconName(element)}\r\n                    />\r\n                </div>\r\n\r\n                <div className={styles.wrap}>\r\n                    <TitleInfo textColor=\"element\" iconColor=\"element\" textSize=\"h6\">\r\n                        {status}\r\n                    </TitleInfo>\r\n\r\n                    <TextInline>\r\n                        {types.map((type, $t) => {\r\n                            return (\r\n                                <Text tag=\"b\" color=\"grey\" size=\"small\" key={$t}>\r\n                                    {type}\r\n                                </Text>\r\n                            );\r\n                        })}\r\n                    </TextInline>\r\n                </div>\r\n            </TextInline>\r\n\r\n            <Text color=\"element\" tag=\"h3\" size=\"h3\" className={styles.title}>\r\n                {title}\r\n            </Text>\r\n\r\n            <Text tag=\"p\" color=\"element\" size=\"h6\" className={styles.text}>\r\n                {intro}\r\n            </Text>\r\n\r\n            {description.map((desc, $d) => {\r\n                return (\r\n                    <div key={$d} className={styles.text}>\r\n                        <Text tag=\"p\" size=\"h6\" className={styles.text}>\r\n                            {desc.title}\r\n                        </Text>\r\n\r\n                        <Text tag=\"p\" color=\"grey\" className={styles.text}>\r\n                            {desc.content}\r\n                        </Text>\r\n                    </div>\r\n                );\r\n            })}\r\n        </WhiteCard>\r\n    );\r\n};","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styles from './Quadras.module.scss';\r\nimport { Text } from '../../components/Text';\r\nimport { WhiteCard } from '../../components/WhiteCard';\r\nimport { Props as QuadraCardProps, QuadraCard } from '../../components/QuadraCard';\r\nimport { AuthorLine } from '../../components/AuthorLine';\r\n\r\nconst QUADRAS_DATA: Array<Omit<QuadraCardProps, 'onClick'>> = [\r\n    {\r\n        element: 'air',\r\n        status: 'Альфа',\r\n        types: ['Демократия', 'Рассудительность'],\r\n        intro: 'Создать и распространить в обществе принципиально новые идеи социального развития.',\r\n        description: [\r\n            {\r\n                title: 'Демократы',\r\n                content: 'Открытость, плюрализм, преобладание горизонтальных управленческих связей.'\r\n            },\r\n            {\r\n                title: 'Рассудительные',\r\n                content: 'Совещательность, отсутствие силового компонента в принятии решений.'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        element: 'fire',\r\n        status: 'Бета',\r\n        types: ['Аристократия', 'Решительность'],\r\n        intro: 'Превратить первоначальную концепцию в законченную идеологию и внедрить новые порядки, создавая организационные структуры.',\r\n        description: [\r\n            {\r\n                title: 'Аристократия',\r\n                content: 'Закрытость, преобладание вертикальных, иерархических, управленческих связей.'\r\n            },\r\n            {\r\n                title: 'Решительность',\r\n                content: 'Приоритет силовых методов, решительные и активные действия'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        element: 'water',\r\n        status: 'Гамма',\r\n        types: ['Демократия', 'Решительность'],\r\n        intro: 'Снять накопившиеся на предыдущем этапе противоречия через критику допущенных ошибок и провести реформирование отживших жестких структур.',\r\n        description: [\r\n            {\r\n                title: 'Демократия',\r\n                content: 'Открытость, плюрализм, преобладание горизонтальных управленческих связей.'\r\n            },\r\n            {\r\n                title: 'Решительность',\r\n                content: 'Приоритет силовых методов, решительные и активные действия'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        element: 'earth',\r\n        status: 'Дельта',\r\n        types: ['Аристократия', 'Рассудительность'],\r\n        intro: 'Снять накопившиеся на предыдущем этапе противоречия через критику допущенных ошибок и провести реформирование отживших жестких структур.',\r\n        description: [\r\n            {\r\n                title: 'Аристократия',\r\n                content: 'Закрытость, преобладание вертикальных, иерархических, управленческих связей.'\r\n            },\r\n            {\r\n                title: 'Рассудительность',\r\n                content: 'Совещательность, отсутствие силового компонента в принятии решений.'\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport default function Quadras() {\r\n    const goTo = useNavigate();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <WhiteCard color=\"white\">\r\n                <Text tag=\"h1\" size=\"h4\" font=\"additional\" className={styles.title}>\r\n                    Квадры\r\n                </Text>\r\n                <AuthorLine text='Читать 5 минут' iconName='Time'>Неизвестен</AuthorLine>\r\n\r\n                <Text tag=\"p\" className={styles.text}>\r\n                    Совокупность социотипов, которые совместимы между собой, их\r\n                    связывают общие цели, жизненные позиции и способы достижения\r\n                    замыслов.\r\n                </Text>\r\n\r\n                <Text tag=\"p\" className={styles.text}>\r\n                    Всего существует четыре квадры — Альфа, Бета, Гамма и\r\n                    Дельта.\r\n                </Text>\r\n\r\n                <Text tag=\"p\" className={styles.text}>\r\n                    В каждой квадре властвует особая психологическая атмосфера,\r\n                    или дух квадры.\r\n                </Text>\r\n\r\n                <Text tag=\"p\" className={styles.text}>\r\n                    В квадре находятся четыре разных социотипа, их объединяют\r\n                    признаки:\r\n                </Text>\r\n\r\n                <Text tag=\"ul\" className={styles.list}>\r\n                    <Text tag=\"li\">Язык квадры</Text>\r\n                    <Text tag=\"li\">Взгляды на мир и принципы ценностей</Text>\r\n                    <Text tag=\"li\">Способ принятия решений</Text>\r\n                    <Text tag=\"li\">\r\n                        Сексуальная программа — техника секса, соблазнение,\r\n                        прелюдия и т.д.\r\n                    </Text>\r\n                    <Text tag=\"li\">Комплекс квадры</Text>\r\n                </Text>\r\n            </WhiteCard>\r\n\r\n            {QUADRAS_DATA.map((item, $i) => {\r\n                return <QuadraCard {...item} onClick={() => goTo(item.element)} key={$i}/>;\r\n            })}\r\n        </div>\r\n    );\r\n}"],"names":["AuthorLine","text","iconName","children","className","styles","Icon","name","color","size","Text","TextInline","align","justify","join","TitleInfo","textColor","textSize","iconColor","iconSize","render","tag","WhiteCard","React","ref","small","style","onClick","classes","QuadraCard","element","status","types","intro","description","useColorElement","title","QUADRAS","getIconName","map","type","$t","desc","$d","content","QUADRAS_DATA","Quadras","goTo","useNavigate","font","item","$i","key"],"sourceRoot":""}