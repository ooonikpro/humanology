{"version":3,"file":"static/js/9127.e2b595ae.chunk.js","mappings":"4JACA,EAAuB,yBAAvB,EAAuD,yB,iCCW1CA,EAA+B,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC3D,OACI,iBAAKC,UAAWC,EAAhB,WACI,kBAAMD,UAAWC,EAAjB,WACI,SAACC,EAAA,EAAD,CAAMC,KAAML,EAAUM,MAAM,SAASC,KAAM,MAC3C,SAACC,EAAA,EAAD,CAAMD,KAAK,QAAQD,MAAM,SAAzB,SACKP,QAGT,kBAAMG,UAAWC,EAAjB,WACI,SAACK,EAAA,EAAD,CAAMD,KAAK,QAAQD,MAAM,SAAzB,SACKL,KAEL,SAACG,EAAA,EAAD,CAAMC,KAAK,YAAYC,MAAM,SAASC,KAAM,a,kECxB5D,GAAgB,KAAO,yBAAyB,cAAc,gCAAgC,gBAAgB,kCAAkC,eAAe,iCAAiC,gBAAgB,kCAAkC,kBAAkB,qC,WCSvPE,EAA8B,SAAC,GAAkE,IAAhER,EAA+D,EAA/DA,SAA+D,IAArDS,MAAAA,OAAqD,MAA7C,SAA6C,MAAnCC,QAAAA,OAAmC,MAAzB,QAAyB,EAAhBT,EAAgB,EAAhBA,UACzF,OACI,gBAAKA,UAAW,CACZC,EAAAA,KACAA,EAAO,SAAD,OAAUO,IAChBP,EAAO,WAAD,OAAYQ,IAClBT,GACFU,KAAK,KALP,SAMKX,M,mECjBb,GAAgB,KAAO,yB,2CCiBVY,EAA6B,SAAC,GASpC,IAAD,IARFC,UAAAA,OAQE,MARU,SAQV,MAPFC,SAAAA,OAOE,MAPS,OAOT,MANFC,UAAAA,OAME,MANU,SAMV,MALFC,SAAAA,OAKE,MALS,GAKT,EAJFP,EAIE,EAJFA,MACAT,EAGE,EAHFA,SACAC,EAEE,EAFFA,UACAgB,EACE,EADFA,OAEA,OACI,UAACT,EAAA,EAAD,CAAYC,MAAOA,EAAOR,UAAWA,EAAWS,QAAQ,UAAxD,UAEQO,EAASA,KACL,SAACV,EAAA,EAAD,CAAMW,IAAI,IAAIb,MAAOQ,EAAWP,KAAMQ,EAAUb,UAAWC,EAAAA,KAA3D,SACKF,KAIb,SAACG,EAAA,EAAD,CACIC,KAAK,OACLC,MAAOU,EACPT,KAAMU,EACNf,UAAWC,EAAAA,Y,qECxC3B,GAAgB,KAAO,wBAAwB,MAAQ,yBAAyB,MAAQ,yBAAyB,cAAc,+BAA+B,MAAQ,0B,WCWzJiB,EAAYC,EAAAA,YACrB,WAAoFC,GAAM,IAArEC,EAAoE,EAApEA,MAAoE,IAA7DjB,MAAAA,OAA6D,MAArD,QAAqD,EAA5CL,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,UAAWsB,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,QAC/DC,EAAU,CACZvB,EAAAA,KACAA,EAAOG,GACPiB,EAAQpB,EAAAA,MAAe,GACvBD,GACFU,KAAK,KAEP,OACI,gBAAKU,IAAKA,EAAKpB,UAAWwB,EAASF,MAAOA,EAAOC,QAASA,EAA1D,SACKxB,Q,wGCtBjB,GAAgB,KAAO,sBAAsB,aAAa,4BAA4B,MAAQ,uBAAuB,IAAM,qBAAqB,OAAS,wBAAwB,GAAK,oBAAoB,KAAO,uB,sBCAjN,EAAuB,yBAAvB,EAAwD,0BAAxD,EAAyF,yBAAzF,EAAyH,yBAAzH,EAAyJ,yB,iECsB5I0B,EAA8B,SAAC,GAOrC,IANHC,EAME,EANFA,QACAH,EAKE,EALFA,QACAI,EAIE,EAJFA,OACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,MACAC,EACE,EADFA,YAEeR,GAAUS,EAAAA,EAAAA,IAAgBL,GAAjCtB,MACF4B,EAAQC,EAAAA,EAAQP,GAEtB,OACI,UAACR,EAAA,EAAD,CACII,MAAOA,EACPtB,UAAWC,EACXsB,QAASA,EAHb,WAKI,UAAChB,EAAA,EAAD,CAAYC,MAAM,QAAQR,UAAWC,EAArC,WACI,gBAAKD,UAAWC,EAAhB,UACI,SAACC,EAAA,EAAD,CACIG,KAAM,GACND,MAAM,UACND,MAAM+B,EAAAA,EAAAA,GAAYR,QAI1B,iBAAK1B,UAAWC,EAAhB,WACI,SAACU,EAAA,EAAD,CAAWC,UAAU,UAAUE,UAAU,UAAUD,SAAS,KAA5D,SACKc,KAGL,SAACpB,EAAA,EAAD,UACKqB,EAAMO,KAAI,SAACC,EAAMC,GACd,OACI,SAAC/B,EAAA,EAAD,CAAMW,IAAI,IAAIb,MAAM,OAAOC,KAAK,QAAhC,SACK+B,GADwCC,eASjE,SAAC/B,EAAA,EAAD,CAAMF,MAAM,UAAUa,IAAI,KAAKZ,KAAK,KAAKL,UAAWC,EAApD,SACK+B,KAGL,SAAC1B,EAAA,EAAD,CAAMW,IAAI,IAAIb,MAAM,UAAUC,KAAK,KAAKL,UAAWC,EAAnD,SACK4B,IAGJC,EAAYK,KAAI,SAACG,EAAMC,GACpB,OACI,iBAAcvC,UAAWC,EAAzB,WACI,SAACK,EAAA,EAAD,CAAMW,IAAI,IAAIZ,KAAK,KAAKL,UAAWC,EAAnC,SACKqC,EAAKN,SAGV,SAAC1B,EAAA,EAAD,CAAMW,IAAI,IAAIb,MAAM,OAAOJ,UAAWC,EAAtC,SACKqC,EAAKE,YANJD,U,WCpExBE,EAAwD,CAC1D,CACIf,QAAS,MACTC,OAAQ,iCACRC,MAAO,CAAC,+DAAc,oGACtBC,MAAO,6bACPC,YAAa,CACT,CACIE,MAAO,yDACPQ,QAAS,kZAEb,CACIR,MAAO,uFACPQ,QAAS,gXAIrB,CACId,QAAS,OACTC,OAAQ,2BACRC,MAAO,CAAC,2EAAgB,kFACxBC,MAAO,mpBACPC,YAAa,CACT,CACIE,MAAO,2EACPQ,QAAS,+ZAEb,CACIR,MAAO,iFACPQ,QAAS,+TAIrB,CACId,QAAS,QACTC,OAAQ,iCACRC,MAAO,CAAC,+DAAc,kFACtBC,MAAO,muBACPC,YAAa,CACT,CACIE,MAAO,+DACPQ,QAAS,kZAEb,CACIR,MAAO,iFACPQ,QAAS,+TAIrB,CACId,QAAS,QACTC,OAAQ,uCACRC,MAAO,CAAC,2EAAgB,oGACxBC,MAAO,muBACPC,YAAa,CACT,CACIE,MAAO,2EACPQ,QAAS,+ZAEb,CACIR,MAAO,mGACPQ,QAAS,iXAMV,SAASE,IACpB,IAAMC,GAAOC,EAAAA,EAAAA,MAEb,OACI,iBAAK5C,UAAWC,EAAAA,KAAhB,WACI,UAACiB,EAAA,EAAD,CAAWd,MAAM,QAAjB,WACI,SAACE,EAAA,EAAD,CAAMW,IAAI,KAAKZ,KAAK,KAAKwC,KAAK,aAAa7C,UAAWC,EAAAA,MAAtD,mDAGA,SAACL,EAAA,EAAD,CAAYC,KAAK,wEAAiBC,SAAS,OAA3C,2EAEA,SAACQ,EAAA,EAAD,CAAMW,IAAI,IAAIjB,UAAWC,EAAAA,KAAzB,4rBAMA,SAACK,EAAA,EAAD,CAAMW,IAAI,IAAIjB,UAAWC,EAAAA,KAAzB,iUAKA,SAACK,EAAA,EAAD,CAAMW,IAAI,IAAIjB,UAAWC,EAAAA,KAAzB,0ZAKA,SAACK,EAAA,EAAD,CAAMW,IAAI,IAAIjB,UAAWC,EAAAA,KAAzB,+WAKA,UAACK,EAAA,EAAD,CAAMW,IAAI,KAAKjB,UAAWC,EAAAA,KAA1B,WACI,SAACK,EAAA,EAAD,CAAMW,IAAI,KAAV,4EACA,SAACX,EAAA,EAAD,CAAMW,IAAI,KAAV,wMACA,SAACX,EAAA,EAAD,CAAMW,IAAI,KAAV,+IACA,SAACX,EAAA,EAAD,CAAMW,IAAI,KAAV,qWAIA,SAACX,EAAA,EAAD,CAAMW,IAAI,KAAV,yGAIPwB,EAAaN,KAAI,SAACW,EAAMC,GACrB,OAAO,mBAACtB,GAAD,kBAAgBqB,GAAhB,IAAsBvB,QAAS,kBAAMoB,EAAKG,EAAKpB,UAAUsB,IAAKD","sources":["webpack://humanology/./src/components/AuthorLine/AuthorLine.module.scss?8823","components/AuthorLine/AuthorLine.tsx","webpack://humanology/./src/components/TextInline/TextInline.module.scss?4061","components/TextInline/TextInline.tsx","webpack://humanology/./src/components/TitleInfo/TitleInfo.module.scss?5416","components/TitleInfo/TitleInfo.tsx","webpack://humanology/./src/components/WhiteCard/WhiteCard.module.scss?f517","components/WhiteCard/WhiteCard.tsx","webpack://humanology/./src/containers/Quadras/Quadras.module.scss?1e5e","webpack://humanology/./src/components/QuadraCard/QuadraCard.module.scss?5362","components/QuadraCard/QuadraCard.tsx","containers/Quadras/Quadras.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AuthorLine_root__z7IJl\",\"pair\":\"AuthorLine_pair__GPadm\"};","import React from 'react';\nimport styles from './AuthorLine.module.scss';\nimport { Icon } from '../Icon';\nimport { Text } from '../Text';\nimport * as Icons from '../Icon/icons';\n\ninterface Props {\n\ttext?: string;\n    iconName: keyof typeof Icons;\n\tchildren: React.ReactNode;\n}\n\nexport const AuthorLine : React.FC<Props> = ({ text, iconName, children }) => {\n    return (\n        <div className={styles.root}>\n            <span className={styles.pair}>\n                <Icon name={iconName} color=\"accent\" size={16}/>\n                <Text size=\"small\" color=\"accent\">\n                    {text}\n                </Text>\n            </span>\n            <span className={styles.pair}>\n                <Text size=\"small\" color=\"accent\">\n                    {children}\n                </Text>\n                <Icon name=\"UserCheck\" color=\"accent\" size={16}/>\n            </span>\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TextInline_root__H8EDD\",\"align-start\":\"TextInline_align-start__RxI-t\",\"align-stretch\":\"TextInline_align-stretch__88di1\",\"align-center\":\"TextInline_align-center__dVGDQ\",\"justify-start\":\"TextInline_justify-start__ofzIk\",\"justify-between\":\"TextInline_justify-between__pn2n1\"};","import React from 'react';\nimport styles from './TextInline.module.scss';\n\nexport interface Props {\n    className?: string;\n    children: React.ReactNode[];\n    align?: 'center' | 'start' | 'stretch';\n    justify?: 'start' | 'between';\n}\n\nexport const TextInline: React.FC<Props> = ({ children, align = 'center', justify = 'start', className }) => {\n    return (\n        <div className={[\n            styles.root,\n            styles[`align-${align}`],\n            styles[`justify-${justify}`],\n            className\n        ].join(' ')}>\n            {children}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"TitleInfo_icon__3cnR3\"};","import React from 'react';\nimport styles from './TitleInfo.module.scss';\n\nimport { Text, Props as TextProps } from '../Text';\nimport { Icon, Props as IconProps } from '../Icon';\nimport { TextInline, Props as TextInlineProps } from '../TextInline';\n\ninterface Props {\n    textColor?: TextProps<'strong'>['color'];\n    textSize?: TextProps<'strong'>['size'];\n    iconColor?: IconProps['color'];\n    iconSize?: IconProps['size'];\n    align?: TextInlineProps['align'],\n    children?: React.ReactNode | React.ReactNode[];\n    className?: string;\n    render?: () => Props['children'];\n}\n\nexport const TitleInfo: React.FC<Props> = ({\n    textColor = 'accent',\n    textSize = 'base',\n    iconColor = 'accent',\n    iconSize = 24,\n    align,\n    children,\n    className,\n    render,\n}) => {\n    return (\n        <TextInline align={align} className={className} justify=\"between\">\n            {\n                render ? render() :\n                    <Text tag=\"p\" color={textColor} size={textSize} className={styles.text}>\n                        {children}\n                    </Text>\n            }\n\n            <Icon\n                name=\"Help\"\n                color={iconColor}\n                size={iconSize}\n                className={styles.icon}\n            />\n        </TextInline>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WhiteCard_root__dHza+\",\"white\":\"WhiteCard_white__7Lr55\",\"beige\":\"WhiteCard_beige__XBO+P\",\"beige-title\":\"WhiteCard_beige-title__5zigU\",\"small\":\"WhiteCard_small__ayQ5T\"};","import React from 'react';\nimport styles from './WhiteCard.module.scss';\n\ninterface Props {\n    small?: boolean;\n    children?: React.ReactNode | React.ReactNode[];\n    className?: string;\n    color?: 'white' | 'beige' | 'beige-title' | 'beige-title-big';\n    style?: React.CSSProperties;\n    onClick?: () => void;\n}\n\nexport const WhiteCard = React.forwardRef<HTMLDivElement, Props>(\n    function WhiteCard({ small, color = 'white', children, className, style, onClick }, ref) {\n        const classes = [\n            styles.root,\n            styles[color],\n            small ? styles.small : '',\n            className,\n        ].join(' ');\n\n        return (\n            <div ref={ref} className={classes} style={style} onClick={onClick}>\n                {children}\n            </div>\n        );\n    }\n);","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Quadras_root__ftkle\",\"text-right\":\"Quadras_text-right__18oxJ\",\"title\":\"Quadras_title__pJdKZ\",\"mb8\":\"Quadras_mb8__-WVwb\",\"grower\":\"Quadras_grower__Kp5Kz\",\"ul\":\"Quadras_ul__Lfh8B\",\"list\":\"Quadras_list__jQxmI\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QuadraCard_root__06qZK\",\"title\":\"QuadraCard_title__B9LMy\",\"wrap\":\"QuadraCard_wrap__d0fPK\",\"text\":\"QuadraCard_text__Ypuvu\",\"icon\":\"QuadraCard_icon__pTf9I\"};","import React from 'react';\nimport styles from './QuadraCard.module.scss';\nimport { TextInline } from '../TextInline';\nimport { getIconName, Icon } from '../Icon';\nimport { TitleInfo } from '../TitleInfo';\nimport { Text } from '../Text';\nimport { WhiteCard } from '../WhiteCard';\nimport { useColorElement } from '../../hooks';\nimport { QUADRAS } from '../../constants/natureElements';\nimport { Socionics } from '../../types';\n\nexport interface Props {\n    element: Socionics.Quadras;\n    onClick: () => void;\n    status: string;\n    types: string[];\n    intro : string;\n    description: Array<{\n        title: string;\n        content: string;\n    }>\n}\n\nexport const QuadraCard: React.FC<Props> = ({\n    element,\n    onClick,\n    status,\n    types,\n    intro,\n    description\n}) => {\n    const { color: style } = useColorElement(element);\n    const title = QUADRAS[element];\n\n    return (\n        <WhiteCard\n            style={style}\n            className={styles.root}\n            onClick={onClick}\n        >\n            <TextInline align=\"start\" className={styles.text}>\n                <div className={styles.icon}>\n                    <Icon\n                        size={64}\n                        color=\"element\"\n                        name={getIconName(element)}\n                    />\n                </div>\n\n                <div className={styles.wrap}>\n                    <TitleInfo textColor=\"element\" iconColor=\"element\" textSize=\"h6\">\n                        {status}\n                    </TitleInfo>\n\n                    <TextInline>\n                        {types.map((type, $t) => {\n                            return (\n                                <Text tag=\"b\" color=\"grey\" size=\"small\" key={$t}>\n                                    {type}\n                                </Text>\n                            );\n                        })}\n                    </TextInline>\n                </div>\n            </TextInline>\n\n            <Text color=\"element\" tag=\"h3\" size=\"h3\" className={styles.title}>\n                {title}\n            </Text>\n\n            <Text tag=\"p\" color=\"element\" size=\"h6\" className={styles.text}>\n                {intro}\n            </Text>\n\n            {description.map((desc, $d) => {\n                return (\n                    <div key={$d} className={styles.text}>\n                        <Text tag=\"p\" size=\"h6\" className={styles.text}>\n                            {desc.title}\n                        </Text>\n\n                        <Text tag=\"p\" color=\"grey\" className={styles.text}>\n                            {desc.content}\n                        </Text>\n                    </div>\n                );\n            })}\n        </WhiteCard>\n    );\n};","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from './Quadras.module.scss';\nimport { Text } from '../../components/Text';\nimport { WhiteCard } from '../../components/WhiteCard';\nimport { Props as QuadraCardProps, QuadraCard } from '../../components/QuadraCard';\nimport { AuthorLine } from '../../components/AuthorLine';\n\nconst QUADRAS_DATA: Array<Omit<QuadraCardProps, 'onClick'>> = [\n    {\n        element: 'air',\n        status: 'Альфа',\n        types: ['Демократия', 'Рассудительность'],\n        intro: 'Создать и распространить в обществе принципиально новые идеи социального развития.',\n        description: [\n            {\n                title: 'Демократы',\n                content: 'Открытость, плюрализм, преобладание горизонтальных управленческих связей.'\n            },\n            {\n                title: 'Рассудительные',\n                content: 'Совещательность, отсутствие силового компонента в принятии решений.'\n            }\n        ]\n    },\n    {\n        element: 'fire',\n        status: 'Бета',\n        types: ['Аристократия', 'Решительность'],\n        intro: 'Превратить первоначальную концепцию в законченную идеологию и внедрить новые порядки, создавая организационные структуры.',\n        description: [\n            {\n                title: 'Аристократия',\n                content: 'Закрытость, преобладание вертикальных, иерархических, управленческих связей.'\n            },\n            {\n                title: 'Решительность',\n                content: 'Приоритет силовых методов, решительные и активные действия'\n            }\n        ]\n    },\n    {\n        element: 'water',\n        status: 'Гамма',\n        types: ['Демократия', 'Решительность'],\n        intro: 'Снять накопившиеся на предыдущем этапе противоречия через критику допущенных ошибок и провести реформирование отживших жестких структур.',\n        description: [\n            {\n                title: 'Демократия',\n                content: 'Открытость, плюрализм, преобладание горизонтальных управленческих связей.'\n            },\n            {\n                title: 'Решительность',\n                content: 'Приоритет силовых методов, решительные и активные действия'\n            }\n        ]\n    },\n    {\n        element: 'earth',\n        status: 'Дельта',\n        types: ['Аристократия', 'Рассудительность'],\n        intro: 'Снять накопившиеся на предыдущем этапе противоречия через критику допущенных ошибок и провести реформирование отживших жестких структур.',\n        description: [\n            {\n                title: 'Аристократия',\n                content: 'Закрытость, преобладание вертикальных, иерархических, управленческих связей.'\n            },\n            {\n                title: 'Рассудительность',\n                content: 'Совещательность, отсутствие силового компонента в принятии решений.'\n            }\n        ]\n    }\n];\n\nexport default function Quadras() {\n    const goTo = useNavigate();\n\n    return (\n        <div className={styles.root}>\n            <WhiteCard color=\"white\">\n                <Text tag=\"h1\" size=\"h4\" font=\"additional\" className={styles.title}>\n                    Квадры\n                </Text>\n                <AuthorLine text='Читать 5 минут' iconName='Time'>Неизвестен</AuthorLine>\n\n                <Text tag=\"p\" className={styles.text}>\n                    Совокупность социотипов, которые совместимы между собой, их\n                    связывают общие цели, жизненные позиции и способы достижения\n                    замыслов.\n                </Text>\n\n                <Text tag=\"p\" className={styles.text}>\n                    Всего существует четыре квадры — Альфа, Бета, Гамма и\n                    Дельта.\n                </Text>\n\n                <Text tag=\"p\" className={styles.text}>\n                    В каждой квадре властвует особая психологическая атмосфера,\n                    или дух квадры.\n                </Text>\n\n                <Text tag=\"p\" className={styles.text}>\n                    В квадре находятся четыре разных социотипа, их объединяют\n                    признаки:\n                </Text>\n\n                <Text tag=\"ul\" className={styles.list}>\n                    <Text tag=\"li\">Язык квадры</Text>\n                    <Text tag=\"li\">Взгляды на мир и принципы ценностей</Text>\n                    <Text tag=\"li\">Способ принятия решений</Text>\n                    <Text tag=\"li\">\n                        Сексуальная программа — техника секса, соблазнение,\n                        прелюдия и т.д.\n                    </Text>\n                    <Text tag=\"li\">Комплекс квадры</Text>\n                </Text>\n            </WhiteCard>\n\n            {QUADRAS_DATA.map((item, $i) => {\n                return <QuadraCard {...item} onClick={() => goTo(item.element)} key={$i}/>;\n            })}\n        </div>\n    );\n}"],"names":["AuthorLine","text","iconName","children","className","styles","Icon","name","color","size","Text","TextInline","align","justify","join","TitleInfo","textColor","textSize","iconColor","iconSize","render","tag","WhiteCard","React","ref","small","style","onClick","classes","QuadraCard","element","status","types","intro","description","useColorElement","title","QUADRAS","getIconName","map","type","$t","desc","$d","content","QUADRAS_DATA","Quadras","goTo","useNavigate","font","item","$i","key"],"sourceRoot":""}