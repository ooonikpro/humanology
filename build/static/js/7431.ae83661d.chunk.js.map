{"version":3,"file":"static/js/7431.ae83661d.chunk.js","mappings":"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","sources":["webpack://humanology/./src/components/EndPoint/EndPoint.module.scss?d835","components/EndPoint/EndPoint.tsx","webpack://humanology/./src/components/TextInline/TextInline.module.scss?4061","components/TextInline/TextInline.tsx","webpack://humanology/./src/components/TitleInfo/TitleInfo.module.scss?5416","components/TitleInfo/TitleInfo.tsx","webpack://humanology/./src/components/WhiteCard/WhiteCard.module.scss?f517","components/WhiteCard/WhiteCard.tsx","constants/clubs.ts","constants/groups.ts","constants/mindset.ts","constants/tarot.ts","constants/yungsDichotomies.ts","webpack://humanology/./src/containers/Sociotypes/SociotypesCard/SociotypesCard.module.scss?9580","constants/reininSigns.ts","constants/motivation.ts","constants/communicationStyle.ts","constants/companion.ts","constants/temperament.ts","constants/alignment.ts","webpack://humanology/./src/components/PropList/PropList.module.scss?b537","components/PropList/PropList.tsx","components/CommunicationList/CommunicationList.tsx","webpack://humanology/./src/components/ListOptions/ListOptions.module.scss?676b","components/ListOptions/ListOptions.tsx","constants/gender.ts","components/GroupsAndQuadsList/GroupsAndQuadsList.tsx","containers/Sociotypes/SociotypesCard/SociotypesCard.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EndPoint_root__g6zO1\",\"icon\":\"EndPoint_icon__6HTTb\"};","import React from 'react';\r\nimport { Icon } from '../Icon';\r\nimport styles from './EndPoint.module.scss';\r\n\r\n\r\ninterface Props {\r\n    className?: string;\r\n}\r\n\r\nexport const EndPoint: React.FC<Props> = ({ className }) => {\r\n    return (\r\n        <div className={className}>\r\n            <Icon className={styles.icon} name=\"Logo\" size={24} color=\"accent\" />\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TextInline_root__RAkEm\",\"align-start\":\"TextInline_align-start__e4AtX\",\"align-stretch\":\"TextInline_align-stretch__0eCGa\",\"align-center\":\"TextInline_align-center__4iy8V\",\"justify-start\":\"TextInline_justify-start__sd6s5\",\"justify-between\":\"TextInline_justify-between__-CLpo\"};","import React from 'react';\r\nimport styles from './TextInline.module.scss';\r\n\r\nexport interface Props {\r\n    className?: string;\r\n    children: React.ReactNode[];\r\n    align?: 'center' | 'start' | 'stretch';\r\n    justify?: 'start' | 'between';\r\n}\r\n\r\nexport const TextInline: React.FC<Props> = ({ children, align = 'center', justify = 'start', className }) => {\r\n    return (\r\n        <div className={[\r\n            styles.root,\r\n            styles[`align-${align}`],\r\n            styles[`justify-${justify}`],\r\n            className\r\n        ].join(' ')}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"TitleInfo_icon__qdCFM\"};","import React from 'react';\r\nimport styles from './TitleInfo.module.scss';\r\n\r\nimport { Text, Props as TextProps } from '../Text';\r\nimport { Icon, Props as IconProps } from '../Icon';\r\nimport { TextInline, Props as TextInlineProps } from '../TextInline';\r\n\r\ninterface Props {\r\n    textColor?: TextProps<'strong'>['color'];\r\n    textSize?: TextProps<'strong'>['size'];\r\n    iconColor?: IconProps['color'];\r\n    iconSize?: IconProps['size'];\r\n    align?: TextInlineProps['align'],\r\n    children?: React.ReactNode | React.ReactNode[];\r\n    className?: string;\r\n    render?: () => Props['children'];\r\n}\r\n\r\nexport const TitleInfo: React.FC<Props> = ({\r\n    textColor = 'accent',\r\n    textSize = 'base',\r\n    iconColor = 'accent',\r\n    iconSize = 24,\r\n    align,\r\n    children,\r\n    className,\r\n    render,\r\n}) => {\r\n    return (\r\n        <TextInline align={align} className={className} justify=\"between\">\r\n            {\r\n                render ? render() :\r\n                    <Text tag=\"p\" color={textColor} size={textSize} className={styles.text}>\r\n                        {children}\r\n                    </Text>\r\n            }\r\n\r\n            <Icon\r\n                name=\"Help\"\r\n                color={iconColor}\r\n                size={iconSize}\r\n                className={styles.icon}\r\n            />\r\n        </TextInline>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WhiteCard_root__4CB-F\",\"white\":\"WhiteCard_white__CsytW\",\"beige\":\"WhiteCard_beige__rBOqm\",\"beige-title\":\"WhiteCard_beige-title__VaXNR\",\"small\":\"WhiteCard_small__cJWRQ\"};","import React from 'react';\r\nimport styles from './WhiteCard.module.scss';\r\n\r\ninterface Props {\r\n    small?: boolean;\r\n    children?: React.ReactNode | React.ReactNode[];\r\n    className?: string;\r\n    color?: 'white' | 'beige' | 'beige-title' | 'beige-title-big';\r\n    style?: React.CSSProperties;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport const WhiteCard = React.forwardRef<HTMLDivElement, Props>(\r\n    function WhiteCard({ small, color = 'white', children, className, style, onClick }, ref) {\r\n        const classes = [\r\n            styles.root,\r\n            styles[color],\r\n            small ? styles.small : '',\r\n            className,\r\n        ].join(' ');\r\n\r\n        return (\r\n            <div ref={ref} className={classes} style={style} onClick={onClick}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n);","import { Socionics } from '../types';\r\n\r\nexport const CLUBS: Record<Socionics.Club, string> = {\r\n    social: 'Социал',\r\n    scientific: 'Исследователь',\r\n    practice: 'Практик',\r\n    humanitarian: 'Гуманитарий',\r\n};\r\n","import { Socionics } from '../types';\r\n\r\nexport const GROUPS: Record<Socionics.Psychotype, string> = {\r\n    infantile: 'Инфантил',\r\n    aggressor: 'Агрессор',\r\n    care: 'Заботливый',\r\n    victim: 'Виктим',\r\n} as const;\r\n","import { Socionics } from '../types';\r\n\r\nexport const MIND_KEY: Record<Socionics.MindKey, string> = {\r\n    'irrational-1': 'Иррационал',\r\n    'irrational-2': 'Иррационал',\r\n    'rational-1': 'Рационал',\r\n    'rational-4': 'Рационал',\r\n};\r\n\r\nexport const mindset: Record<Socionics.Mindset, string> = {\r\n    casual: 'Причинно-следственное',\r\n    algorithmic: 'Диалектико-алгоритмическое',\r\n    vortical: 'Вихревое',\r\n    holographic: 'Голографическое',\r\n};\r\n","import { Socionics } from '../types';\r\n\r\nexport const TAROT: Record<Socionics.Tarot, string> = {\r\n    swords: 'Мечи',\r\n    pentacles: 'Пентакли',\r\n    cups: 'Кубки',\r\n    wands: 'Посохи',\r\n} as const;\r\n","import { Socionics } from '../types';\r\n\r\nexport const YUNGS_DICHTOMIES: Record<Socionics.Dichotomy, string> = {\r\n    irrational: 'Иррационал',\r\n    rational: 'Рационал',\r\n    intuit: 'Интуит',\r\n    sensory: 'Сенсорик',\r\n    logic: 'Логик',\r\n    ethic: 'Этик',\r\n    extravert: 'Экстраверт',\r\n    introvert: 'Интроверт',\r\n} as const;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"SociotypesCard_title__bt3eq\",\"list\":\"SociotypesCard_list__vqC2w\",\"wrap\":\"SociotypesCard_wrap__XNt0k\"};","import { Socionics } from '../types';\r\n\r\nexport const REININ_SIGNS: Record<Socionics.ReininSign, string> = {\r\n    static: 'Статик',\r\n    dynamic: 'Динамик',\r\n    positivist: 'Позитивист',\r\n    negativist: 'Негативист',\r\n    questim: 'Квестим',\r\n    declamtim: 'Декламтим',\r\n    tactician: 'Тактик',\r\n    strategist: 'Стратег',\r\n    constructivist: 'Конструктивист',\r\n    emotivist: 'Эмотивист',\r\n    process: 'Процесс',\r\n    result: 'Результат',\r\n    compliant: 'Уступчивый',\r\n    stubborn: 'Упрямый',\r\n    careless: 'Беспечный',\r\n    provident: 'Предусмотрительный',\r\n    reasonable: 'Рассудительный',\r\n    decisive: 'Решительный',\r\n    subjective: 'Субъективный',\r\n    objective: 'Объективный',\r\n    democrat: 'Демократ',\r\n    aristocrat: 'Аристократ',\r\n};\r\n","import { Socionics } from '../types';\r\n\r\nexport const MOTIVATION: Record<Socionics.Stimulant, string> = {\r\n    uniqueness: 'Уникальность',\r\n    wealth: 'Благосостояние',\r\n    status: 'Статус',\r\n    selfSufficiency: 'Самодостаточность',\r\n};\r\n","import { Socionics } from '../types';\r\n\r\nexport const COMMUNICATION_STYLE: Record<Socionics.CommunicationStyle, string> = {\r\n    business: 'Деловой',\r\n    sincere: 'Душевный',\r\n    passionate: 'Страстный',\r\n    coldBlooded: 'Хладнокровный',\r\n};\r\n","import { Socionics } from '../types';\r\n\r\nexport const COMPANION: Record<Socionics.Companion, string> = {\r\n    categorical: 'Категоричный',\r\n    sensitive: 'Чувствительный',\r\n    uncompromising: 'Бескомпромиссный',\r\n    restrained: 'Сдержанный',\r\n    provident: 'Предусмотрительный',\r\n    volitional: 'Волевой',\r\n    stubborn: 'Упрямый',\r\n};\r\n","import { Socionics } from '../types';\r\n\r\nexport const TEMPERAMENT: Record<Socionics.Temperament, string> = {\r\n    sanguine: 'Сангвиник',\r\n    melancholic: 'Меланхолик',\r\n    phlegmatic: 'Флегматик',\r\n    choleric: 'Холерик',\r\n};\r\n\r\nexport const TEMPERAMENT_LABEL: Record<Socionics.Temperament, string> = {\r\n    sanguine: 'Гибко-разворотливый',\r\n    melancholic: 'Восприимчиво-адаптивный',\r\n    phlegmatic: 'Уравновешенно-стабильный',\r\n    choleric: 'Линейно-напористый',\r\n};\r\n","import { Socionics } from '../types';\r\n\r\nexport const ALIGNMENT: Record<Socionics.Alignment, string> = {\r\n    chaoticNeutral: 'Хаотичный нейтральный',\r\n    chaoticGood: 'Хаотичный добрый',\r\n    chaoticEvil: 'Хаотичный злой',\r\n    lawfulNeutral: 'Законопослушный нейтральный',\r\n    lawfulEvil: 'Законопослушный злой',\r\n    lawfulGood: 'Законопослушный добрый',\r\n    trueNeutral: 'Истинно нейтральный',\r\n    neutralEvil: 'Нейтральный злой',\r\n    neutralGood: 'Нейтральный добрый',\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"PropList_row__zym4U\",\"value\":\"PropList_value__24ZaF\",\"icon\":\"PropList_icon__u1Pt9\",\"sublabel\":\"PropList_sublabel__SnDNW\"};","import React from 'react';\r\nimport styles from './PropList.module.scss';\r\nimport { getIconName, Icon } from '../../components/Icon';\r\nimport { Text } from '../../components/Text';\r\n\r\nexport interface RowItem {\r\n    iconColor?: 'element' | 'role' | 'accent' | 'black';\r\n    iconSize?: { width: number, height: number };\r\n    textColor: 'element' | 'role' | 'accent' | 'black';\r\n    icon?: string,\r\n    label: string,\r\n    value: string;\r\n    subLabel?: string;\r\n}\r\n\r\ninterface Props {\r\n    rows: RowItem[];\r\n    className?: string;\r\n}\r\n\r\nexport const PropList: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className={[styles.root, props.className].join(' ')}>\r\n            {\r\n                props.rows.map((row, $i) => {\r\n                    return (\r\n                        <div key={$i} className={styles.row}>\r\n                            <div className={styles.label}>\r\n                                <Text size=\"smaller\" color=\"grey\">{row.label}</Text>\r\n                            </div>\r\n                            <div className={styles.value}>\r\n                                <Text color={row.textColor}>{row.value}</Text>\r\n                                \r\n                                {\r\n                                    row.icon &&\r\n                                        <Icon\r\n                                            name={getIconName(row.icon)}\r\n                                            size={row.iconSize || 24}\r\n                                            color={row.iconColor}\r\n                                            className={styles.icon}\r\n                                        />\r\n                                }\r\n\r\n                                {\r\n                                    row.subLabel &&\r\n                                        <Text\r\n                                            color=\"grey\" size=\"smaller\"\r\n                                            className={styles.sublabel}\r\n                                        >\r\n                                            { row.subLabel }\r\n                                        </Text>\r\n                                }\r\n                            </div>\r\n\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { Socionics } from '../../types';\r\nimport { MOTIVATION } from '../../constants/motivation';\r\nimport { COMMUNICATION_STYLE } from '../../constants/communicationStyle';\r\nimport { COMPANION } from '../../constants/companion';\r\nimport { TEMPERAMENT, TEMPERAMENT_LABEL } from '../../constants/temperament';\r\nimport { mindset } from '../../constants/mindset';\r\nimport { ALIGNMENT } from '../../constants/alignment';\r\nimport { PropList, RowItem } from '../../components/PropList';\r\n\r\ninterface Props {\r\n    mindset: Socionics.Mindset;\r\n    stimulant: Socionics.Stimulant;\r\n    communication: Socionics.CommunicationStyle;\r\n    companion: Socionics.Companion;\r\n    temperament: Socionics.Temperament;\r\n    alignment: Socionics.Alignment;\r\n    className?: string;\r\n}\r\n\r\nexport const CommunicationList: React.FC<Props> = (props) => {\r\n    const rows: RowItem[] = [\r\n        {\r\n            textColor: 'role',\r\n            label: 'Стимул',\r\n            value: MOTIVATION[props.stimulant],\r\n        },\r\n        {\r\n            icon: props.temperament,\r\n            iconSize: { width: 38, height: 16 },\r\n            iconColor: 'role',\r\n            textColor: 'black',\r\n            label: 'Темперамент',\r\n            value: TEMPERAMENT[props.temperament],\r\n            subLabel: TEMPERAMENT_LABEL[props.temperament],\r\n        },\r\n        {\r\n            textColor: 'black',\r\n            label: 'Мышление',\r\n            value: mindset[props.mindset],\r\n        },\r\n        {\r\n            textColor: 'black',\r\n            label: 'Стиль общения',\r\n            value: COMMUNICATION_STYLE[props.communication],\r\n        },\r\n        {\r\n            textColor: 'black',\r\n            label: 'Собеседник',\r\n            value: COMPANION[props.companion],\r\n        },\r\n        {\r\n            textColor: 'black',\r\n            label: 'Мировоззрение',\r\n            value: ALIGNMENT[props.alignment],\r\n        },\r\n    ];\r\n\r\n    return <PropList rows={rows} className={props.className}/>;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"ListOptions_row__zcPSt\",\"divider\":\"ListOptions_divider__wHsyu\"};","import React from 'react';\r\nimport styles from './ListOptions.module.scss';\r\nimport { Text } from '../Text';\r\n\r\ninterface Props {\r\n    options: Array<{ label: string; value: string }>\r\n    className?: string;\r\n}\r\n\r\nexport const ListOptions: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className={[styles.root, props.className].join(' ')}>\r\n            {\r\n                props.options.map((item, $i) => {\r\n                    return (\r\n                        <div className={styles.row} key={$i}>\r\n                            <Text tag=\"p\" color=\"grey\" size=\"smaller\">{item.label}</Text>\r\n                            <hr className={styles.divider}/>\r\n                            <Text tag=\"p\" color=\"black\">{item.value}</Text>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};","import { Socionics } from '../types';\r\n\r\nexport const GENDER: Record<Socionics.Gender, string> = {\r\n    male: 'Мужской',\r\n    female: 'Женский',\r\n};\r\n","import React from 'react';\r\nimport { Socionics } from '../../types';\r\nimport { PropList, RowItem } from '../PropList';\r\nimport { QUADRAS } from '../../constants/natureElements';\r\nimport { ROLE } from '../../constants/role';\r\nimport { TAROT } from '../../constants/tarot';\r\nimport { GROUPS } from '../../constants/groups';\r\nimport { CLUBS } from '../../constants/clubs';\r\nimport { GENDER } from '../../constants/gender';\r\n\r\ninterface Props {\r\n    element: Socionics.Quadras\r\n    role: Socionics.Role\r\n    tarot: Socionics.Tarot\r\n    psychotype: Socionics.Psychotype\r\n    club: Socionics.Club\r\n    gender: Socionics.Gender\r\n    className?: string\r\n}\r\n\r\nconst LABELS: Record<keyof Omit<Props, 'className'>, string> = {\r\n    element: 'Квадра',\r\n    role: 'Карта',\r\n    tarot: 'Масть',\r\n    psychotype: 'Группа',\r\n    club: 'Клуб',\r\n    gender: 'Тип характера',\r\n};\r\n\r\nexport const GroupsAndQuadsList: React.FC<Props> = (props) => {\r\n    const rows: RowItem[] = [\r\n        {\r\n            iconColor: 'element',\r\n            textColor: 'element',\r\n            icon: props.element,\r\n            label: LABELS.element,\r\n            value: QUADRAS[props.element],\r\n        },\r\n        {\r\n            iconColor: 'role',\r\n            textColor: 'role',\r\n            icon: props.role,\r\n            label: LABELS.role,\r\n            value: ROLE[props.role].label,\r\n        },\r\n        {\r\n            iconColor: 'accent',\r\n            textColor: 'black',\r\n            icon: props.tarot,\r\n            label: LABELS.tarot,\r\n            value: TAROT[props.tarot],\r\n        },\r\n        {\r\n            iconColor: 'accent',\r\n            textColor: 'black',\r\n            icon: props.psychotype,\r\n            label: LABELS.psychotype,\r\n            value: GROUPS[props.psychotype],\r\n        },\r\n        {\r\n            iconColor: 'accent',\r\n            textColor: 'black',\r\n            icon: props.club,\r\n            label: LABELS.club,\r\n            value: CLUBS[props.club],\r\n        },\r\n        {\r\n            iconColor: 'accent',\r\n            textColor: 'black',\r\n            icon: props.gender,\r\n            label: LABELS.gender,\r\n            value: GENDER[props.gender],\r\n        },\r\n    ];\r\n\r\n    return <PropList rows={rows} className={props.className}/>;\r\n};","import React from 'react';\r\nimport styles from './SociotypesCard.module.scss';\r\nimport { Socionics } from '../../../types';\r\nimport { useIntertype } from '../../../hooks/useSocionicsType';\r\nimport { WhiteCard } from '../../../components/WhiteCard';\r\nimport { YUNGS_DICHTOMIES } from '../../../constants/yungsDichotomies';\r\nimport { REININ_SIGNS } from '../../../constants/reininSigns';\r\nimport { CommunicationList } from '../../../components/CommunicationList';\r\nimport { TitleInfo } from '../../../components/TitleInfo';\r\nimport { ListOptions } from '../../../components/ListOptions';\r\nimport { GroupsAndQuadsList } from '../../../components/GroupsAndQuadsList';\r\nimport { EndPoint } from '../../../components/EndPoint';\r\n\r\nconst getRow = (\r\n    options: Array<string[]>,\r\n    translate: Record<string, string>\r\n) => {\r\n    return (value: string, $i: number) => {\r\n        const label = options[$i].filter((l) => l !== value).toLocaleString();\r\n\r\n        return {\r\n            label: translate[label],\r\n            value: translate[value],\r\n        };\r\n    };\r\n};\r\n\r\nconst Dichotomy: Array<Socionics.Dichotomy[]> = [\r\n    ['irrational', 'rational'],\r\n    ['intuit', 'sensory'],\r\n    ['logic', 'ethic'],\r\n    ['extravert', 'introvert'],\r\n];\r\n\r\nconst reininRows: Array<Socionics.ReininSign[]> = [\r\n    ['static', 'dynamic'],\r\n    ['positivist', 'negativist'],\r\n    ['questim', 'declamtim'],\r\n    ['tactician', 'strategist'],\r\n    ['constructivist', 'emotivist'],\r\n\r\n    ['process', 'result'],\r\n    ['compliant', 'stubborn'],\r\n    ['careless', 'provident'],\r\n\r\n    ['reasonable', 'decisive'],\r\n    ['subjective', 'objective'],\r\n    ['democrat', 'aristocrat'],\r\n];\r\n\r\nexport default function SociotypesCard() {\r\n    const { intertypeProps } = useIntertype();\r\n\r\n    const dichotomyYungs = intertypeProps.yungs.map(\r\n        getRow(Dichotomy, YUNGS_DICHTOMIES)\r\n    );\r\n\r\n    const list = intertypeProps.reinin.map(getRow(reininRows, REININ_SIGNS));\r\n    const reininList = [list.slice(0, 5), list.slice(5, 8), list.slice(8)];\r\n\r\n    return (\r\n        <div className={styles.wrap}>\r\n            <WhiteCard color=\"beige-title\">\r\n                <TitleInfo className={styles.title}>Ментальность</TitleInfo>\r\n                <CommunicationList\r\n                    {...intertypeProps}\r\n                    className={styles.list}\r\n                />\r\n            </WhiteCard>\r\n            <WhiteCard color=\"beige-title\">\r\n                <TitleInfo className={styles.title}>Группы и квадры</TitleInfo>\r\n                <GroupsAndQuadsList\r\n                    {...intertypeProps}\r\n                    className={styles.list}\r\n                />\r\n            </WhiteCard>\r\n            <WhiteCard color=\"beige-title\">\r\n                <TitleInfo className={styles.title}>Дихотомии Юнга</TitleInfo>\r\n                <ListOptions\r\n                    options={dichotomyYungs}\r\n                    className={styles.list}\r\n                />\r\n            </WhiteCard>\r\n            <WhiteCard color=\"beige-title\">\r\n                <TitleInfo className={styles.title}>Признаки Рейнина</TitleInfo>\r\n                {reininList.map((list, $i) => (\r\n                    <ListOptions\r\n                        options={list}\r\n                        key={$i}\r\n                        className={styles.list}\r\n                    />\r\n                ))}\r\n            </WhiteCard>\r\n            <EndPoint />\r\n        </div>\r\n    );\r\n}\r\n"],"names":["EndPoint","className","Icon","styles","name","size","color","TextInline","children","align","justify","join","TitleInfo","textColor","textSize","iconColor","iconSize","render","Text","tag","WhiteCard","React","ref","small","style","onClick","classes","CLUBS","social","scientific","practice","humanitarian","GROUPS","infantile","aggressor","care","victim","MIND_KEY","mindset","casual","algorithmic","vortical","holographic","TAROT","swords","pentacles","cups","wands","YUNGS_DICHTOMIES","irrational","rational","intuit","sensory","logic","ethic","extravert","introvert","REININ_SIGNS","static","dynamic","positivist","negativist","questim","declamtim","tactician","strategist","constructivist","emotivist","process","result","compliant","stubborn","careless","provident","reasonable","decisive","subjective","objective","democrat","aristocrat","MOTIVATION","uniqueness","wealth","status","selfSufficiency","COMMUNICATION_STYLE","business","sincere","passionate","coldBlooded","COMPANION","categorical","sensitive","uncompromising","restrained","volitional","TEMPERAMENT","sanguine","melancholic","phlegmatic","choleric","TEMPERAMENT_LABEL","ALIGNMENT","chaoticNeutral","chaoticGood","chaoticEvil","lawfulNeutral","lawfulEvil","lawfulGood","trueNeutral","neutralEvil","neutralGood","PropList","props","rows","map","row","$i","label","value","icon","getIconName","subLabel","CommunicationList","stimulant","temperament","width","height","communication","companion","alignment","ListOptions","options","item","GENDER","male","female","LABELS","GroupsAndQuadsList","element","QUADRAS","role","ROLE","tarot","psychotype","club","gender","getRow","translate","filter","l","toLocaleString","Dichotomy","reininRows","SociotypesCard","intertypeProps","useIntertype","dichotomyYungs","yungs","list","reinin","reininList","slice"],"sourceRoot":""}